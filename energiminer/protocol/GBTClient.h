/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_FARMCLIENT_H_
#define JSONRPC_CPP_STUB_FARMCLIENT_H_

#include "energiminer/Log.h"

#include <jsonrpccpp/client.h>

#include <iostream>
using namespace std;

class GBTClient : public jsonrpc::Client
{
public:
    GBTClient(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V1)
        : jsonrpc::Client(conn, type)
    {}

    Json::Value getBlockTemplate() throw (jsonrpc::JsonRpcException)
    {
        auto params = Json::Value(Json::arrayValue);
        auto object = Json::Value(Json::objectValue);
        object["capabilities"] = Json::Value(Json::arrayValue);
        object["capabilities"].append("coinbasetxn");
        object["capabilities"].append("coinbasevalue");
        object["capabilities"].append("longpoll");
        object["capabilities"].append("workid");
        params.append(object);

        Json::Value result = this->CallMethod("getblocktemplate", params);
        if (result.isObject() ) {
            return result;
        } else {
            throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
    }

    bool submitSolution(const energi::Solution &solution)
    {
        Json::Value params(Json::arrayValue);
        auto result1 = solution.getSubmitBlockData();
        params.append(result1);
        Json::Value result = this->CallMethod("submitblock", params);
        auto resultStr = result.toStyledString();
        std::cout << "submitSolution result: " << resultStr << std::endl;
        return resultStr == "null";
    }
};

#endif //JSONRPC_CPP_STUB_FARMCLIENT_H_
